# -*- coding: utf-8 -*-
"""BlenderBot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PnNjEoHiEgLU2O0wlb8zOK8iRkIeEtJ_
"""

import pandas as pd
import re
from transformers import BlenderbotTokenizer, BlenderbotForConditionalGeneration

import torch

if torch.cuda.is_available():
    device = torch.device("cuda")
    print(f"Using GPU: {torch.cuda.get_device_name(0)}")
else:
    device = torch.device("cpu")
    print("Using CPU")

# Load BlenderBot-2 (3B)
model_name = "facebook/blenderbot-3B"
tokenizer = BlenderbotTokenizer.from_pretrained(model_name)
model = BlenderbotForConditionalGeneration.from_pretrained(model_name)
model.to(device)

# Load the CSV file
dataset_path = "chit_chat.csv"
df = pd.read_csv(dataset_path)

user_prompts = df['content']

# Function to generate responses using BlenderBot-2
def generate_response_blenderbot(prompt, max_length=100):
    inputs = tokenizer(prompt, return_tensors="pt").to(device)

    # Generate response
    outputs = model.generate(
        inputs['input_ids'],
        max_length=max_length,
        pad_token_id=tokenizer.eos_token_id,
        temperature=0.8,        # Adjust for more creativity
        top_k=50,               # Top-k sampling
        top_p=0.85,             # Nucleus sampling
        repetition_penalty=1.2,  # Increase penalty to avoid repetition
        do_sample=True
    )

    # Decode and clean the response
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response

# List to store results
blenderbot_responses = []

# Loop through each user prompt and generate a response
for prompt in user_prompts:
    response = generate_response_blenderbot(prompt)
    blenderbot_responses.append(response)

# Save the prompts and responses to a CSV file
evaluation_data = pd.DataFrame({
    'Prompt': user_prompts,
    'Response': blenderbot_responses
})

# Define the filename to save the evaluation data
output_filename = "blenderbot_responses.csv"

# Save the DataFrame to a CSV file
evaluation_data.to_csv(output_filename, index=False)

print(f"Evaluation data saved to {output_filename}")